# To get started with security, check out the documentation:
# http://symfony.com/doc/current/book/security.html
security:
    role_hierarchy:
        ROLE_USER: []
        ROLE_EDITOR: [ROLE_USER]
        ROLE_ADMIN: [ROLE_EDITOR]
        ROLE_SUPER_EDITOR: [ROLE_EDITOR]
        ROLE_SUPER_USER: [ROLE_ADMIN, ROLE_SUPER_EDITOR, ROLE_ALLOWED_TO_SWITCH]

    encoders:
        App\Entity\User\User:
            algorithm: bcrypt

    # http://symfony.com/doc/current/book/security.html#where-do-users-come-from-user-providers
    providers:
        local_db_provider:
            entity:
                class: App\Entity\User\User
                property: username

        db_provider:
            entity:
                class: App\Entity\User\User
                property: username

        saml_provider:
            # Basic provider instantiates a user with default roles
            saml:
                user_class: 'App\Entity\User\User'
                default_roles: ['ROLE_USER']

        in_memory:
            memory: ~

    firewalls:
        # disables authentication for assets and the profiler, adapt it according to your needs
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        session_check:
            pattern: ^/session/check
            methods: [GET]
            security: false

        read_api:
            pattern: ^/api/
            methods: [GET]
            security: false

        main:
            pattern: ^/
            anonymous: true
            #stateless: true
            provider: local_db_provider
            user_checker: App\Security\UserChecker

            entry_point: salt.authentication.json_form_entry_point

            # activate different ways to authenticate

            # http://symfony.com/doc/current/book/security.html#a-configuring-how-your-users-will-authenticate
            # http_basic: ~

            # http://symfony.com/doc/current/cookbook/security/form_login_setup.html
            form_login:
                login_path: login
                check_path: login
                csrf_token_generator: security.csrf.token_manager
                default_target_path: salt_index
                always_use_default_target_path: false
                use_referer: true

            saml:
                # Match SAML attribute 'uid' with username.
                # Uses getNameId() method by default.
                # username_attribute: uid
                # Use the attribute's friendlyName instead of the name
                use_attribute_friendly_name: true
                check_path: /saml/acs
                login_path: /saml/login
                 # User factory service
                user_factory: saml_user_creator
                # Persist new user. Doctrine is required.
                persist_user: true

            logout:
                path: /saml/logout

    # with these settings you can restrict or allow access for different parts
    # of your application based on roles, ip, host or methods
    # http://symfony.com/doc/current/cookbook/security/access_control.htm
    # Note: Only the *first* access control that matches will be used
    access_control:
        #- { path: ^/login, roles: IS_AUTHENTICATED_ANONYMOUSLY, requires_channel: https }
        - { path: ^/saml/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/saml/metadata, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/logout, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        # added this line and need to integrate access control with current system
        - { path: ^/secure, roles: ROLE_USER }

services:
    salt.authentication.json_form_entry_point:
        class: App\Security\EntryPoint\JsonFormAuthenticationEntryPoint
        parent: security.authentication.form_entry_point.main
        autowire: true
        public: true
